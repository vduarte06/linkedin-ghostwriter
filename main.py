#!/usr/bin/env python3
"""Unified command-line interface for LinkedIn Ghostwriter (Click-based).

Subcommands:
- main         : Interactive ghostwriter workflow (generate + evaluate)
- test-judge   : Test LLM judge (general post quality)
- test-jargon  : Test LLM judge (corporate jargon detector)
- dash         : Test rule-based evaluator (dash count)
"""

import sys
import os
import json
from pathlib import Path
import click

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).parent / "src"))

from linkedin_ghostwriter import (
    LinkedInGhostwriter,
    DashCountEvaluator,
    LLMJudgeEvaluator,
    CorporateJargonJudgeEvaluator,
)


@click.group(context_settings=dict(help_option_names=["-h", "--help"]))
def cli():
    """LinkedIn Ghostwriter - AI-powered post generation and evaluation."""
    pass


@cli.command(name="write", help="Run the interactive ghostwriter workflow (generate + evaluate)")
def main_workflow():
    """Run the interactive ghostwriter workflow (generate + evaluate)."""
    click.echo("🚀 LinkedIn Ghostwriter - AI-powered post generation")
    click.echo("=" * 50)

    try:
        # Initialize evaluators
        dash_evaluator = DashCountEvaluator()
        llm_evaluator = LLMJudgeEvaluator()

        # Create ghostwriter
        ghostwriter = LinkedInGhostwriter([dash_evaluator, llm_evaluator])

        click.echo("✅ Ghostwriter initialized successfully!")
        click.echo("\nEnter your raw notes (press Enter twice to finish):")

        # Collect raw notes
        lines = []
        while True:
            line = click.prompt("", prompt_suffix="", default="", show_default=False)
            if line == "" and lines and lines[-1] == "":
                click.echo("↵↵ End of input detected. Processing...")
                break
            lines.append(line)

        raw_notes = "\n".join(lines[:-1]).strip()  # Remove the last empty line

        if not raw_notes:
            click.echo("❌ No notes provided. Exiting.")
            return

        click.echo(f"\n📝 Processing notes: {raw_notes[:100]}{'...' if len(raw_notes) > 100 else ''}")
        click.echo("\n🔄 Generating post with evaluation...")

        # Generate post
        final_post, iterations, passed = ghostwriter.generate_with_evaluation(raw_notes)

        click.echo(f"\n📝 Generated Post (Iteration {iterations}):")
        click.echo("-" * 50)
        click.echo(final_post)
        click.echo("-" * 50)

        if passed:
            click.echo("✅ All evaluations passed!")
        else:
            click.echo("⚠️ Some evaluations failed, but max iterations reached.")

        # Ask if user wants to save
        if click.confirm("\n💾 Save this post to a file?", default=False):
            filename = click.prompt("📁 Enter filename", default="linkedin_post.txt")
            Path(filename).write_text(
                f"LinkedIn Post (Generated in {iterations} iterations)\n" +
                "=" * 50 + "\n\n" +
                final_post +
                f"\n\n---\nGenerated by LinkedIn Ghostwriter\n",
                encoding="utf-8"
            )
            click.echo(f"✅ Post saved to {filename}")

    except KeyboardInterrupt:
        click.echo("\n\n👋 Goodbye!")
    except Exception as e:
        print(e)
        click.echo(f"\n❌ Error: {e}")
        sys.exit(1)


def _prompt_multiline(title: str) -> str:
    """Prompt user for multiline input terminated by two consecutive blank lines."""
    click.echo(title)
    lines = []
    while True:
        line = click.prompt("", prompt_suffix="", default="", show_default=False)
        if line == "" and lines and lines[-1] == "":
            click.echo("↵↵ End of input detected. Processing...")
            break
        lines.append(line)
    return "\n".join(lines[:-1]).strip()


def _load_text(text: str, file: str, *, interactive_title: str = "Enter text (press Enter twice to finish):") -> str:
    if text:
        return text
    if file:
        path = Path(file)
        if not path.exists():
            raise click.ClickException(f"File not found: {file}")
        return path.read_text(encoding="utf-8")
    # Fallback to interactive input if neither provided
    content = _prompt_multiline(interactive_title)
    if not content:
        raise click.ClickException("No text provided.")
    return content


@cli.command(name="test-judge", help="Test LLM judge (general post quality)")
@click.option("--text", type=str, default="", help="Post text to evaluate (LLM judge)")
@click.option("--file", type=str, default="", help="Path to file with post text (LLM judge)")
@click.option("--model", type=str, default=None, help="LLM model name (overrides env/Config)")
@click.option("--temperature", type=float, default=0.0, help="LLM temperature")
@click.option("--pretty", is_flag=True, help="Pretty-print JSON output")
def test_judge_cmd(text: str, file: str, model: str, temperature: float, pretty: bool):
    """Test the general LLM judge with custom text or file input."""
    try:
        click.echo("🔎 LLM Judge (general) — evaluating post...")
        content = _load_text(text, file, interactive_title="Enter post text for LLM judge (Enter twice to finish):")
        evaluator = LLMJudgeEvaluator(model=model, temperature=temperature)
        result = evaluator.evaluate(content)
        click.echo(json.dumps(result, indent=2 if pretty else None, ensure_ascii=False))
    except Exception as e:
        raise click.ClickException(str(e))


@cli.command(name="test-jargon", help="Test LLM judge (corporate jargon detector)")
@click.option("--text", type=str, default="", help="Post text to evaluate (corporate jargon judge)")
@click.option("--file", type=str, default="", help="Path to file with post text (corporate jargon judge)")
@click.option("--model", type=str, default=None, help="LLM model name (overrides env/Config)")
@click.option("--temperature", type=float, default=0.0, help="LLM temperature")
@click.option("--pretty", is_flag=True, help="Pretty-print JSON output")
def test_jargon_cmd(text: str, file: str, model: str, temperature: float, pretty: bool):
    """Test the corporate jargon LLM judge with custom text or file input."""
    try:
        click.echo("🔎 LLM Judge (corporate jargon) — evaluating post...")
        content = _load_text(text, file, interactive_title="Enter post text for corporate jargon judge (Enter twice to finish):")
        evaluator = CorporateJargonJudgeEvaluator(model=model, temperature=temperature)
        result = evaluator.evaluate(content)
        click.echo(json.dumps(result, indent=2 if pretty else None, ensure_ascii=False))
    except Exception as e:
        raise click.ClickException(str(e))


@cli.command(name="dash", help="Test rule-based evaluator (dash count)")
@click.option("--text", type=str, default="", help="Post text to evaluate (dash evaluator)")
@click.option("--file", type=str, default="", help="Path to file with post text (dash evaluator)")
@click.option("--max-dashes", type=int, default=3, help="Maximum allowed dashes")
@click.option("--pretty", is_flag=True, help="Pretty-print JSON output")
def dash_cmd(text: str, file: str, max_dashes: int, pretty: bool):
    """Test the dash-count evaluator with custom text or file input."""
    try:
        click.echo("🧪 Rule-based evaluator (dash count) — evaluating post...")
        content = _load_text(text, file, interactive_title="Enter post text for dash evaluator (Enter twice to finish):")
        evaluator = DashCountEvaluator(max_allowed=max_dashes)
        result = evaluator.evaluate(content)
        click.echo(json.dumps(result, indent=2 if pretty else None, ensure_ascii=False))
    except Exception as e:
        raise click.ClickException(str(e))


if __name__ == "__main__":
    cli()
